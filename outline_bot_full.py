import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3
import requests
from datetime import datetime, timedelta
import threading

API_TOKEN = "7809159665:AAEM1x02VKgTAs8OzTt0I-ZUC57XbKXMORU"
CRYPTO_BOT_TOKEN = "368678:AA5a84tPAU5I8dTTgZ0oyMseyYCitoJCg7c"
OUTLINE_API_URL = "https://194.156.66.56:57071/dzLy_MMYLxSWsao8fjOgLA"
CRYPTO_BOT_API = "https://pay.crypt.bot/api"

bot = telebot.TeleBot(API_TOKEN, threaded=True)

manual_usdt_rate = None
TRAFFIC_LIMIT_GB = 1
EXTRA_GB_PRICE = 100

# DB INIT
db = sqlite3.connect("infervpn.db", check_same_thread=False)
cursor = db.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    key_id INTEGER,
    access_url TEXT,
    expires DATETIME,
    is_trial BOOLEAN DEFAULT 1,
    balance REAL DEFAULT 0,
    is_subscribed BOOLEAN DEFAULT 0,
    traffic_used REAL DEFAULT 0
)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS payments (
    payment_id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    invoice_id TEXT,
    amount REAL,
    status TEXT DEFAULT 'pending'
)''')
db.commit()

# –ö—É—Ä—Å

def get_usdt_rate():
    if manual_usdt_rate:
        return manual_usdt_rate
    try:
        response = requests.get("https://api.binance.com/api/v3/ticker/price?symbol=USDTRUB", timeout=5)
        return float(response.json()['price'])
    except:
        return 90  # fallback –∫—É—Ä—Å

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

def main_menu():
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("üíº –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data='balance'),
        InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='buy_outline'),
        InlineKeyboardButton("üì° –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data='my_subscription'),
        InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='pay'),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data='status'),
        InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data='help')
    )
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    cursor.execute("INSERT OR IGNORE INTO users (id) VALUES (?)", (user_id,))
    db.commit()
    bot.send_message(user_id, "üëã –ü—Ä–∏–≤–µ—Ç –æ—Ç –∫–æ–º–∞–Ω–¥—ã INFERVPN! –ú—ã –∑–∞ —Å–≤–æ–±–æ–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –∑–∞—â–∏—â—ë–Ω–Ω—É—é —Ü–∏—Ñ—Ä–æ–≤—É—é –∂–∏–∑–Ω—å. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å!", reply_markup=main_menu())

@bot.message_handler(func=lambda m: True, content_types=['text'])
def support_message(message):
    if message.text.isdigit():
        handle_amount_input(message)
    else:
        print(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç {message.from_user.id} ({message.from_user.first_name}): {message.text}")

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    user_id = call.from_user.id
    try:
        if call.data == 'balance':
            cursor.execute("SELECT balance FROM users WHERE id=?", (user_id,))
            balance = cursor.fetchone()[0]
            bot.send_message(user_id, f"üíº –ë–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ")

        elif call.data == 'pay':
            bot.send_message(user_id, "üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö:")

        elif call.data.startswith('check_payment_'):
            invoice_id = call.data.split('_')[-1]
            headers = {"Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN}
            resp = requests.get(f"{CRYPTO_BOT_API}/getInvoices", headers=headers, params={"invoice_ids": invoice_id}).json()
            status = resp['result']['items'][0]['status']
            if status == 'paid':
                cursor.execute("UPDATE payments SET status='paid' WHERE invoice_id=?", (invoice_id,))
                cursor.execute("UPDATE users SET balance=balance+(SELECT amount FROM payments WHERE invoice_id=?) WHERE id=?", (invoice_id, user_id))
                db.commit()
                bot.send_message(user_id, "‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!")
            else:
                bot.send_message(user_id, "‚è≥ –ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")

        elif call.data == 'buy_outline':
            cursor.execute("SELECT balance FROM users WHERE id=?", (user_id,))
            balance = cursor.fetchone()[0]
            if balance >= 240:
                res = requests.post(f"{OUTLINE_API_URL}/access-keys", verify=False).json()
                key_id, access_url = res['id'], res['accessUrl']
                expires = datetime.now() + timedelta(days=30)
                cursor.execute("UPDATE users SET key_id=?, access_url=?, expires=?, is_subscribed=1, balance=balance-240, is_trial=0, traffic_used=0 WHERE id=?",
                               (key_id, access_url, expires, user_id))
                db.commit()
                bot.send_message(user_id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ {expires.strftime('%d.%m.%Y %H:%M')}\n–í–∞—à –∫–ª—é—á: {access_url}\nüì¶ –¢—Ä–∞—Ñ–∏–∫: 1 –ì–ë")
            else:
                bot.send_message(user_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")

        elif call.data == 'status':
            cursor.execute("SELECT expires FROM users WHERE id=?", (user_id,))
            result = cursor.fetchone()
            if result and result[0]:
                expires = datetime.strptime(result[0], '%Y-%m-%d %H:%M:%S.%f')
                left = expires - datetime.now()
                bot.send_message(user_id, f"üìä –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ {expires.strftime('%d.%m.%Y %H:%M')} (–æ—Å—Ç–∞–ª–æ—Å—å {left.days} –¥., {left.seconds//3600} —á.)")
            else:
                bot.send_message(user_id, "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")

        elif call.data == 'my_subscription':
            cursor.execute("SELECT access_url, expires, traffic_used FROM users WHERE id=?", (user_id,))
            row = cursor.fetchone()
            if row and row[1]:
                access_url, expires, traffic = row
                expires = datetime.strptime(expires, '%Y-%m-%d %H:%M:%S.%f')
                over = max(0, traffic - TRAFFIC_LIMIT_GB)
                bot.send_message(user_id, f"üîë –ö–ª—é—á: {access_url}\nüìÖ –î–æ: {expires.strftime('%d.%m.%Y %H:%M')}\nüìä –¢—Ä–∞—Ñ–∏–∫: {traffic:.2f} –ì–ë / {TRAFFIC_LIMIT_GB} –ì–ë\nüí∏ –°–≤–µ—Ä—Ö: {int(over)} –ì–ë √ó {EXTRA_GB_PRICE}‚ÇΩ = {int(over)*EXTRA_GB_PRICE} ‚ÇΩ")
            else:
                bot.send_message(user_id, "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

        elif call.data == 'help':
            bot.send_message(user_id, "üÜò –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

        bot.answer_callback_query(call.id)

    except Exception as e:
        bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã

def handle_amount_input(message):
    user_id = message.from_user.id
    rub = float(message.text)
    usdt = round(rub / get_usdt_rate(), 2)
    headers = {"Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN}
    payload = {"asset": "USDT", "amount": usdt, "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {rub}‚ÇΩ"}
    resp = requests.post(f"{CRYPTO_BOT_API}/createInvoice", headers=headers, json=payload).json()
    if resp.get('ok'):
        invoice = resp['result']
        cursor.execute("INSERT INTO payments (user_id, invoice_id, amount) VALUES (?, ?, ?)", (user_id, invoice['invoice_id'], rub))
        db.commit()
        markup = InlineKeyboardMarkup().add(InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f'check_payment_{invoice["invoice_id"]}'))
        bot.send_message(user_id, f"üí≥ [–û–ø–ª–∞—Ç–∏—Ç–µ {usdt} USDT]({invoice['pay_url']})", reply_markup=markup, parse_mode="Markdown")
    else:
        bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á—ë—Ç–∞.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
threading.Thread(target=lambda: bot.infinity_polling(timeout=30, long_polling_timeout=10), daemon=True).start()

# –ö–æ–Ω—Å–æ–ª—å
while True:
    cmd = input("–ö–æ–º–∞–Ω–¥–∞ (rate/support/add_balance): ").strip().lower()
    if cmd == "rate":
        manual_usdt_rate = float(input("USDT –∫ RUB: "))
    elif cmd == "support":
        uid = int(input("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "))
        msg = input("–°–æ–æ–±—â–µ–Ω–∏–µ: ")
        bot.send_message(uid, f"üîî –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {msg}")
    elif cmd == "add_balance":
        uid = int(input("ID: "))
        amt = float(input("–°—É–º–º–∞: "))
        cursor.execute("UPDATE users SET balance=balance+? WHERE id=?", (amt, uid))
        db.commit()
        print("‚úÖ –ì–æ—Ç–æ–≤–æ")
